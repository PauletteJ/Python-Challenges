Say "Hello, World!" With Python

Print Hello, World! to stdout.

print("Hello, World!")

--------

Python If-Else

Task
Given an integer, n, perform the following conditional actions:

    If n is odd, print Weird
If n is even and in the inclusive range of 2 to 5, print Not Weird
If n is even and in the inclusive range of 6 to 20, print Weird
If n is even and greater than 20, print Not Weird

Input Format

A single line containing a positive integer, n.

Constraints

Output Format

Print Weird if the number is weird. Otherwise, print Not Weird.

#!/bin/python3

import math
import os
import random
import re
import sys


if __name__ == '__main__':
    n = int(input().strip())
if n == 2 or n ==4:
    output = "Not Weird"
elif n % 2 == 0 and n > 20:
    output = "Not Weird"
else:
    output = "Weird"
print(output)

---------

Arithmetic Operators


Task
The provided code stub reads two integers from STDIN, a and b. Add code to print three lines where:

    The first line contains the sum of the two numbers.
    The second line contains the difference of the two numbers (first - second).
    The third line contains the product of the two numbers.

Example

a=3
b=5

Print the following:

8
-2
15

Input Format

The first line contains the first integer,
.
The second line contains the second integer,

.

Constraints


Output Format

Print the three lines as explained above. 

if __name__ == '__main__':
    a = int(input())
    b = int(input())
print(a+b)
print(a - b)
print(a*b)


--------

Python: Division

Task
The provided code stub reads two integers, a and b, from STDIN.

Add logic to print two lines. The first line should contain the result of integer division, a // b. The second line should contain the result of float division, a/b.

No rounding or formatting is necessary.


Input Format

The first line contains the first integer, a.
The second line contains the second integer, b.

Output Format

Print the two lines as described above. 

if __name__ == '__main__':
    a = int(input())
    b = int(input())
print(a//b)
print(a/b)

--------

Loops

Task
The provided code stub reads and integer, n, from STDIN. For all non-negative integers i < n, print i^2. 

Input Format

The first and only line contains the integer, n.

Constraints

1 <= i <= 20

Output Format

Print n lines, one corresponding to each i. 

if __name__ == '__main__':
    n = int(input())
i = 0
while i < n:
    print(i**2)
    i = i + 1
    
--------

Write a function

An extra day is added to the calendar almost every four years as February 29, and the day is called a leap day. It corrects the calendar for the fact that our planet takes approximately 365.25 days to orbit the sun. A leap year contains a leap day.

In the Gregorian calendar, three conditions are used to identify leap years:

    The year can be evenly divided by 4, is a leap year, unless:
        The year can be evenly divided by 100, it is NOT a leap year, unless:
            The year is also evenly divisible by 400. Then it is a leap year.

This means that in the Gregorian calendar, the years 2000 and 2400 are leap years, while 1800, 1900, 2100, 2200, 2300 and 2500 are NOT leap years. Source

Task

Given a year, determine whether it is a leap year. If it is a leap year, return the Boolean True, otherwise return False.

Note that the code stub provided reads from STDIN and passes arguments to the is_leap function. It is only necessary to complete the is_leap function.

Input Format

Read year, the year to test.

Constraints

1900 <= year <= 10**5

Output Format

The function must return a Boolean value (True/False). Output is handled by the provided code stub.

if year % 400 = 0;
        leap = True
        
--------

Print Function

The included code stub will read an integer, n, from STDIN.

Without using any string methods, try to print the following:

123...n

Note that "..." represents the consecutive values in between.

Example

n = 5

Print the string 12345.

Input Format

The first line contains an integer n.

Constraints

1 <= n <= 150

Output Format

Print the list of integers from 1 through n as a string, without spaces.

if __name__ == '__main__':
    n = int(input())
print_string = ""
for i in range(n):
    print_string = print_string + str(i+1)
print(print_string)

--------

Introduction to Sets

Ms. Gabriel Williams is a botany professor at District College. One day, she asked her student Mickey to compute the average of all the plants with distinct heights in her greenhouse.

Function Description

Complete the average function in the editor below.

average has the following parameters:

    int arr: an array of integers

Returns

    float: the resulting float value rounded to 3 places after the decimal

Input Format

The first line contains the integer, N, the size of arr.
The second line contains the N space-separated integers, arr[i].

def average(array):
    return sum(set(array))/len(set(array))

if __name__ == '__main__':

