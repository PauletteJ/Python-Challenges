Say "Hello, World!" With Python

Print Hello, World! to stdout.

print("Hello, World!")

--------

Python If-Else

Task
Given an integer, n, perform the following conditional actions:

    If n is odd, print Weird
If n is even and in the inclusive range of 2 to 5, print Not Weird
If n is even and in the inclusive range of 6 to 20, print Weird
If n is even and greater than 20, print Not Weird

Input Format

A single line containing a positive integer, n.

Constraints

Output Format

Print Weird if the number is weird. Otherwise, print Not Weird.

#!/bin/python3

import math
import os
import random
import re
import sys


if __name__ == '__main__':
    n = int(input().strip())
if n == 2 or n ==4:
    output = "Not Weird"
elif n % 2 == 0 and n > 20:
    output = "Not Weird"
else:
    output = "Weird"
print(output)

---------

Arithmetic Operators


Task
The provided code stub reads two integers from STDIN, a and b. Add code to print three lines where:

    The first line contains the sum of the two numbers.
    The second line contains the difference of the two numbers (first - second).
    The third line contains the product of the two numbers.

Example

a=3
b=5

Print the following:

8
-2
15

Input Format

The first line contains the first integer,
.
The second line contains the second integer,

.

Constraints


Output Format

Print the three lines as explained above. 

if __name__ == '__main__':
    a = int(input())
    b = int(input())
print(a+b)
print(a - b)
print(a*b)


--------

Python: Division

Task
The provided code stub reads two integers, a and b, from STDIN.

Add logic to print two lines. The first line should contain the result of integer division, a // b. The second line should contain the result of float division, a/b.

No rounding or formatting is necessary.


Input Format

The first line contains the first integer, a.
The second line contains the second integer, b.

Output Format

Print the two lines as described above. 

if __name__ == '__main__':
    a = int(input())
    b = int(input())
print(a//b)
print(a/b)

--------

Loops

Task
The provided code stub reads and integer, n, from STDIN. For all non-negative integers i < n, print i^2. 

Input Format

The first and only line contains the integer, n.

Constraints

1 <= i <= 20

Output Format

Print n lines, one corresponding to each i. 

if __name__ == '__main__':
    n = int(input())
i = 0
while i < n:
    print(i**2)
    i = i + 1
    
--------

Write a function

An extra day is added to the calendar almost every four years as February 29, and the day is called a leap day. It corrects the calendar for the fact that our planet takes approximately 365.25 days to orbit the sun. A leap year contains a leap day.

In the Gregorian calendar, three conditions are used to identify leap years:

    The year can be evenly divided by 4, is a leap year, unless:
        The year can be evenly divided by 100, it is NOT a leap year, unless:
            The year is also evenly divisible by 400. Then it is a leap year.

This means that in the Gregorian calendar, the years 2000 and 2400 are leap years, while 1800, 1900, 2100, 2200, 2300 and 2500 are NOT leap years. Source

Task

Given a year, determine whether it is a leap year. If it is a leap year, return the Boolean True, otherwise return False.

Note that the code stub provided reads from STDIN and passes arguments to the is_leap function. It is only necessary to complete the is_leap function.

Input Format

Read year, the year to test.

Constraints

1900 <= year <= 10**5

Output Format

The function must return a Boolean value (True/False). Output is handled by the provided code stub.

if year % 400 = 0;
        leap = True
        
--------

Print Function

The included code stub will read an integer, n, from STDIN.

Without using any string methods, try to print the following:

123...n

Note that "..." represents the consecutive values in between.

Example

n = 5

Print the string 12345.

Input Format

The first line contains an integer n.

Constraints

1 <= n <= 150

Output Format

Print the list of integers from 1 through n as a string, without spaces.

if __name__ == '__main__':
    n = int(input())
print_string = ""
for i in range(n):
    print_string = print_string + str(i+1)
print(print_string)

--------

Introduction to Sets

Ms. Gabriel Williams is a botany professor at District College. One day, she asked her student Mickey to compute the average of all the plants with distinct heights in her greenhouse.

Function Description

Complete the average function in the editor below.

average has the following parameters:

    int arr: an array of integers

Returns

    float: the resulting float value rounded to 3 places after the decimal

Input Format

The first line contains the integer, N, the size of arr.
The second line contains the N space-separated integers, arr[i].

def average(array):
    return sum(set(array))/len(set(array))

if __name__ == '__main__':

--------

Symmetric Difference

Task
Given 2 sets of integers M, and N, print their symmetric difference in ascending order. The term symmetric difference indicates those values that exist in either M or N but do not exist in both.

Input Format

The first line of input contains an integer, M.
The second line contains M space-separated integers.
The third line contains an integer, N.
The fourth line contains N space-separated integers.

Output Format

Output the symmetric difference integers in ascending order, one per line.

M,m=input(),set(list(map(int,input().split())))
N,n=input(),set(list(map(int,input().split())))
s = sorted(list(m.difference(n))+list(n.difference(m)))
for i in s:
    print (i)
    
--------

No Idea!

There is an array of n integers. There are also 2 disjoint sets A, and B, each containing m integers. You like all the integers in set A and dislike all the integers in set B. Your initial happiness is 0. For each integer i in the array, if i is in A, you add +1 to your happiness. If i is in B, you add -1 to your happiness. Otherwise, your happiness does not change. Output your final happiness at the end. 

Input Format

The first line contains integers n and m separated by a space.
The second line contains n integers, the elements of the array.
The third and fourth lines contain m integers, A and B, respectively.

Output Format

Output a single integer, your total happiness.
n_and_m=input()
array = input().split()
A = set(input().split())
B = set(input().split())
print(sum((i in A) - (i in B) for i in array))

--------

Set .add()

Task

Apply your knowledge of the .add() operation to help your friend Rupal.

Rupal has a huge collection of country stamps. She decided to count the total number of distinct country stamps in her collection. She asked for your help. You pick the stamps one by one from a stack of N country stamps.

Find the total number of distinct country stamps.

Input Format

The first line contains an integer N, the total number of country stamps.
The next N lines contains the name of the country where the stamp is from.

Constraints

Output Format

Output the total number of distinct country stamps on a single line.

s = set()
N = int(input())
for i in range(0, N):
    s.add(input())
print (len(s))

--------

Task

You have a non-empty set s, and you have to execute N commands given in N lines.

The commands will be pop, remove and discard.

Input Format

The first line contains integer n, the number of elements in the set s.
The second line contains n space separated elements of set s. All of the elements are non-negative integers, less than or equal to 9.
The third line contains integer N, the number of commands.
The next N lines contains either pop, remove and/or discard commands followed by their associated value.

Output Format

Print the sum of the elements of set s on a single line.

n = int(input())
s = set(map(int, input().split()))
N = int(input())
for i in range(N):
    eval('s.{0}({1})'.format(*input().split() + ['']))
print (sum(s))

--------

Set .union() Operation

Task

The students of District College have subscriptions to English and French newspapers. Some students have subscribed only to English, some have subscribed to only French and some have subscribed to both newspapers.

You are given two sets of student roll numbers. One set has subscribed to the English newspaper, and the other set is subscribed to the French newspaper. The same student could be in both sets. Your task is to find the total number of students who have subscribed to at least one newspaper.

Input Format

The first line contains an integer, n, the number of students who have subscribed to the English newspaper.
The second line contains n space separated roll numbers of those students.
The third line contains b, the number of students who have subscribed to the French newspaper.
The fourth line contains b space separated roll numbers of those students. 

Output Format

Output the total number of students who have at least one subscription.

n = int(input())
Eng = set(input().split())
b = int(input())
Fr = set(input().split())

print (len(Eng.union(Fr)))

--------

Set .intersection() Operation

Task

The students of District College have subscriptions to English and French newspapers. Some students have subscribed only to English, some have subscribed only to French, and some have subscribed to both newspapers.

You are given two sets of student roll numbers. One set has subscribed to the English newspaper, one set has subscribed to the French newspaper. Your task is to find the total number of students who have subscribed to both newspapers.

Input Format

The first line contains n, the number of students who have subscribed to the English newspaper.
The second line contains n space separated roll numbers of those students.
The third line contains b, the number of students who have subscribed to the French newspaper.
The fourth line contains b space separated roll numbers of those students.

Output Format

Output the total number of students who have subscriptions to both English and French newspapers.

n = int(input())
Eng = set(input().split())
b = int(input())
Fr = set(input().split())

print (len(Eng.intersection(Fr)))

--------

Lists

Initialize your list and read in the value of n followed by n lines of commands where each command will be of the 7 types listed above. Iterate through each command in order and perform the corresponding operation on your list. 

if __name__ == '__main__':
    N = int(input())
    L = []
for i in range(N):
    arr = input().split()
    command = arr[0]
    arg = arr[1:]
    if command == 'print':
        print (L)
    else: 
        command += "("+ ",".join(arg) +")"
        eval("L."+command)

--------

Tuples

Task
Given an integer, n, and n space-separated integers as input, create a tuple, , of those integers. Then compute and print the result of hash(t).

Note: hash() is one of the functions in the __builtins__ module, so it need not be imported.

Input Format

The first line contains an integer, n, denoting the number of elements in the tuple.
The second line contains space-separated integers describing the elements in tuple t.

Output Format

Print the result of hash(t). 

if __name__ == '__main__':
    n = int(input())
    integer_list = map(int, input().split())
print (hash(tuple(integer_list)))

--------

Finding the percentage

Input Format

The first line contains the integer n, the number of students' records. The next n lines contain the names and marks obtained by a student, each value separated by a space. The final line contains query_name, the name of a student to query.

Output Format

Print one line: The average of the marks obtained by the particular student correct to 2 decimal places.

if __name__ == '__main__':
    n = int(input())
    student_marks = {}
    for _ in range(n):
        name, *line = input().split()
        scores = list(map(float, line))
        student_marks[name] = scores
    query_name = input()
print("{0:.2f}".format(sum(student_marks[query_name])/len(student_marks[query_name])))

--------

Concatenate

Task

You are given two integer arrays of size N X P and M X P (N & M are rows, and P is the column). Your task is to concatenate the arrays along axis 0.

Input Format

The first line contains space separated integers N, M and P.
The next N lines contains the space separated elements of the P columns.
After that, the next M lines contains the space separated elements of the P columns.

Output Format

Print the concatenated array of size (N + M)XP.

import numpy

N, M, P = map(int, input().split())
N_array = numpy.array([input().split() for i in range(N)], int)
M_array = numpy.array([input().split() for i in range(M)], int)
print (numpy.concatenate((N_array, M_array), axis = 0))

--------

Zeros and Ones

Task

You are given the shape of the array in the form of space-separated integers, each integer representing the size of different dimensions, your task is to print an array of the given shape and integer type using the tools numpy.zeros and numpy.ones.

Input Format

A single line containing the space-separated integers.

Output Format

First, print the array using the numpy.zeros tool and then print the array with the numpy.ones tool. 

import numpy as np

nums = tuple(map(int, input().split()))
print (np.zeros((nums), dtype = int))
print (np.ones((nums), dtype = int))

--------

Eye and Identity

Task

Your task is to print an array of size N X M with its main diagonal elements as 1's and 0's everywhere else.

Note

In order to get alignment correct, please insert the line numpy.set_printoptions(legacy='1.13') below the numpy import.

Input Format

A single line containing the space separated values of N and M.

N denotes the rows.

M denotes the columns.

Output Format

Print the desired N X M array.

import numpy
numpy.set_printoptions(legacy='1.13')
N, M = map(int, input().split())
print (numpy.eye(N, M))

--------

Array Mathematics

Task

You are given two integer arrays, A and B of dimensions N X M.
Your task is to perform the following operations:

Add ( A + B)
Subtract (A - B)
Multiply (A * B)
Integer Division (A/B)
Mod (A%B)
Power (A**B )

Input Format

The first line contains two space separated integers, N and M.
The next N lines contains M space separated integers of array A.
The following N lines contains M space separated integers of array B.

Output Format

Print the result of each operation in the given order under Task.

import numpy
N, M = map(int, input().split())
A = numpy.array([input().split() for _ in range(N)], dtype=int)
B = numpy.array([input().split() for _ in range(N)], dtype=int)
print(A+B)
print(A-B)
print(A*B)
print(A//B)
print(A%B)
print(A**B)

--------

Floor, Ceil and Rint

Task
You are given a 1-D array, A. Your task is to print the floor, ceil and rint of all the elements of A. 

Input Format

A single line of input containing the space separated elements of array A.

Output Format

On the first line, print the floor of A.
On the second line, print the ceil of A.
On the third line, print the of rint of A.

import numpy
numpy.set_printoptions(legacy='1.13')
A = numpy.array(input().split(), float)
print(numpy.floor(A), numpy.ceil(A), numpy.rint(A), sep='\n')

--------

Sum and Prod

Task

You are given a 2-D array with dimensions N X M.
Your task is to perform the sum tool over axis 0 and then find the product of that result.

Input Format

The first line of input contains space separated values of N and M.
The next N lines contains M space separated integers.

Output Format

Compute the sum along axis 0. Then, print the product of that sum. 

import numpy
N,M = map(int, input().split())
arr = numpy.array([input().split() for i in range(N)],int)
sum_arr = numpy.sum(arr, axis = 0)
print(numpy.product(sum_arr))

--------

Min and Max

Task

You are given a 2-D array with dimensions N X M.
Your task is to perform the min function over axis 1 and then find the max of that.

Input Format

The first line of input contains the space separated values of N and M.
The next N lines contains M space separated integers.

Output Format

Compute the min along axis 1 and then print the max of that result. 

import numpy
N, M = map(int, input().split())
arr = numpy.array([input().split() for i in range(N)], int)
arr_min = numpy.min(arr, axis = 1)
print(numpy.max(arr_min))


